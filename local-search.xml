<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>几种常用的排序算法</title>
    <link href="/2021/09/12/%E5%87%A0%E7%A7%8D%E5%B8%B8%E7%94%A8%E7%9A%84%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <url>/2021/09/12/%E5%87%A0%E7%A7%8D%E5%B8%B8%E7%94%A8%E7%9A%84%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="1、冒泡排序（Bubble-Sort）"><a href="#1、冒泡排序（Bubble-Sort）" class="headerlink" title="1、冒泡排序（Bubble Sort）"></a>1、冒泡排序（Bubble Sort）</h1><p>冒泡排序是从第一个元素开始和后面相邻的元素进行比较，如果后面元素大则交换，直到将最大的元素放到数组最后，然后剩余元素再重复此过程。</p><p><img src="https://z3.ax1x.com/2021/09/12/498WXn.gif" alt="冒泡排序"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">bubbleSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> arr[], <span class="hljs-keyword">int</span> num)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = num<span class="hljs-number">-1</span>;i &gt; <span class="hljs-number">0</span>;i--)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>;j &lt; i;j++)<br>            <span class="hljs-keyword">if</span>(arr[j] &gt; arr[j+<span class="hljs-number">1</span>])<br>                <span class="hljs-built_in">swap</span>(arr[j], arr[j+<span class="hljs-number">1</span>]);<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> arr[<span class="hljs-number">10</span>] = &#123;<span class="hljs-number">24</span>,<span class="hljs-number">15</span>,<span class="hljs-number">2</span>,<span class="hljs-number">75</span>,<span class="hljs-number">4</span>,<span class="hljs-number">97</span>,<span class="hljs-number">66</span>,<span class="hljs-number">23</span>,<span class="hljs-number">10</span>,<span class="hljs-number">46</span>&#125;;<br><span class="hljs-built_in">bubbleSort</span>(arr, <span class="hljs-number">10</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; <span class="hljs-number">10</span>;i++)<br><span class="hljs-built_in">printf</span>((i == <span class="hljs-number">9</span>)?<span class="hljs-string">&quot;%d\n&quot;</span>:<span class="hljs-string">&quot;%d &quot;</span>, arr[i]);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="2、插入排序（Insertion-Sort）"><a href="#2、插入排序（Insertion-Sort）" class="headerlink" title="2、插入排序（Insertion Sort）"></a>2、插入排序（Insertion Sort）</h1><p>插入排序是从第二个元素开始，向前找到合适的位置，然后插进去，完成后，再从下一个元素开始向前找，直到找完最后一个。</p><p><img src="https://i.loli.net/2021/09/12/fZWtqFrmNVdChU5.gif" alt="插入排序"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">insertSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> arr[], <span class="hljs-keyword">int</span> num)</span> </span>&#123;<br><span class="hljs-keyword">int</span> i, j, tmp;<br><span class="hljs-keyword">for</span>(i = <span class="hljs-number">1</span>;i &lt; num;i++) &#123;<br>tmp = arr[i];<span class="hljs-comment">// 要执行插入操作的数</span><br><span class="hljs-keyword">for</span>(j = i;j &gt; <span class="hljs-number">0</span> &amp;&amp; tmp &lt; arr[j<span class="hljs-number">-1</span>];j--)<br>arr[j] = arr[j<span class="hljs-number">-1</span>];<span class="hljs-comment">// 若数大于 tmp，则向后移一位</span><br>arr[j] = tmp;<span class="hljs-comment">// 将 tmp 填到空出的位置上</span><br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> arr[<span class="hljs-number">10</span>] = &#123;<span class="hljs-number">24</span>,<span class="hljs-number">15</span>,<span class="hljs-number">2</span>,<span class="hljs-number">75</span>,<span class="hljs-number">4</span>,<span class="hljs-number">97</span>,<span class="hljs-number">66</span>,<span class="hljs-number">23</span>,<span class="hljs-number">10</span>,<span class="hljs-number">46</span>&#125;;<br><span class="hljs-built_in">insertSort</span>(arr, <span class="hljs-number">10</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; <span class="hljs-number">10</span>;i++)<br><span class="hljs-built_in">printf</span>((i == <span class="hljs-number">9</span>)?<span class="hljs-string">&quot;%d\n&quot;</span>:<span class="hljs-string">&quot;%d &quot;</span>, arr[i]);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="3、选择排序（Select-Sort）"><a href="#3、选择排序（Select-Sort）" class="headerlink" title="3、选择排序（Select Sort）"></a>3、选择排序（Select Sort）</h1><h1 id="4、归并排序（Merge-Sort）"><a href="#4、归并排序（Merge-Sort）" class="headerlink" title="4、归并排序（Merge Sort）"></a>4、归并排序（Merge Sort）</h1><h1 id="5、快速排序（Quick-Sort）"><a href="#5、快速排序（Quick-Sort）" class="headerlink" title="5、快速排序（Quick Sort）"></a>5、快速排序（Quick Sort）</h1><h1 id="6、堆排序（Heap-Sort）"><a href="#6、堆排序（Heap-Sort）" class="headerlink" title="6、堆排序（Heap Sort）"></a>6、堆排序（Heap Sort）</h1><h1 id="7、桶排序（Bucket-Sort）"><a href="#7、桶排序（Bucket-Sort）" class="headerlink" title="7、桶排序（Bucket Sort）"></a>7、桶排序（Bucket Sort）</h1><h1 id="8、希尔排序（Shell-Sort）"><a href="#8、希尔排序（Shell-Sort）" class="headerlink" title="8、希尔排序（Shell Sort）"></a>8、希尔排序（Shell Sort）</h1>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Re: Blog</title>
    <link href="/2021/09/12/Re-Blog/"/>
    <url>/2021/09/12/Re-Blog/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>日常</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>

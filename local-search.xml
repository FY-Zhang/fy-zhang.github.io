<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>几种常用的排序算法</title>
    <link href="/2021/09/12/%E5%87%A0%E7%A7%8D%E5%B8%B8%E7%94%A8%E7%9A%84%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <url>/2021/09/12/%E5%87%A0%E7%A7%8D%E5%B8%B8%E7%94%A8%E7%9A%84%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="1、冒泡排序（Bubble-Sort）"><a href="#1、冒泡排序（Bubble-Sort）" class="headerlink" title="1、冒泡排序（Bubble Sort）"></a>1、冒泡排序（Bubble Sort）</h1><p>冒泡排序是从第一个元素开始和后面相邻的元素进行比较，如果后面元素大则交换，直到将最大的元素放到数组最后，然后剩余元素再重复此过程。</p><p><img src="https://z3.ax1x.com/2021/09/12/498WXn.gif" alt="冒泡排序"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">bubbleSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> arr[], <span class="hljs-keyword">int</span> num)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = num<span class="hljs-number">-1</span>;i &gt; <span class="hljs-number">0</span>;i--)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>;j &lt; i;j++)<br>            <span class="hljs-keyword">if</span>(arr[j] &gt; arr[j+<span class="hljs-number">1</span>])<br>                <span class="hljs-built_in">swap</span>(arr[j], arr[j+<span class="hljs-number">1</span>]);<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> arr[<span class="hljs-number">10</span>] = &#123;<span class="hljs-number">24</span>,<span class="hljs-number">15</span>,<span class="hljs-number">2</span>,<span class="hljs-number">75</span>,<span class="hljs-number">4</span>,<span class="hljs-number">97</span>,<span class="hljs-number">66</span>,<span class="hljs-number">23</span>,<span class="hljs-number">10</span>,<span class="hljs-number">46</span>&#125;;<br><span class="hljs-built_in">bubbleSort</span>(arr, <span class="hljs-number">10</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; <span class="hljs-number">10</span>;i++)<br><span class="hljs-built_in">printf</span>((i == <span class="hljs-number">9</span>)?<span class="hljs-string">&quot;%d\n&quot;</span>:<span class="hljs-string">&quot;%d &quot;</span>, arr[i]);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="2、插入排序（Insertion-Sort）"><a href="#2、插入排序（Insertion-Sort）" class="headerlink" title="2、插入排序（Insertion Sort）"></a>2、插入排序（Insertion Sort）</h1><p>插入排序是从第二个元素开始，向前找到合适的位置，然后插进去，完成后，再从下一个元素开始向前找，直到找完最后一个。</p><p><img src="https://i.loli.net/2021/09/12/fZWtqFrmNVdChU5.gif" alt="插入排序"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">insertSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> arr[], <span class="hljs-keyword">int</span> num)</span> </span>&#123;<br><span class="hljs-keyword">int</span> i, j, tmp;<br><span class="hljs-keyword">for</span>(i = <span class="hljs-number">1</span>;i &lt; num;i++) &#123;<br>tmp = arr[i];<span class="hljs-comment">// 要执行插入操作的数</span><br><span class="hljs-keyword">for</span>(j = i;j &gt; <span class="hljs-number">0</span> &amp;&amp; tmp &lt; arr[j<span class="hljs-number">-1</span>];j--)<br>arr[j] = arr[j<span class="hljs-number">-1</span>];<span class="hljs-comment">// 若数大于 tmp，则向后移一位</span><br>arr[j] = tmp;<span class="hljs-comment">// 将 tmp 填到空出的位置上</span><br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> arr[<span class="hljs-number">10</span>] = &#123;<span class="hljs-number">24</span>,<span class="hljs-number">15</span>,<span class="hljs-number">2</span>,<span class="hljs-number">75</span>,<span class="hljs-number">4</span>,<span class="hljs-number">97</span>,<span class="hljs-number">66</span>,<span class="hljs-number">23</span>,<span class="hljs-number">10</span>,<span class="hljs-number">46</span>&#125;;<br><span class="hljs-built_in">insertSort</span>(arr, <span class="hljs-number">10</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; <span class="hljs-number">10</span>;i++)<br><span class="hljs-built_in">printf</span>((i == <span class="hljs-number">9</span>)?<span class="hljs-string">&quot;%d\n&quot;</span>:<span class="hljs-string">&quot;%d &quot;</span>, arr[i]);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="3、选择排序（Select-Sort）"><a href="#3、选择排序（Select-Sort）" class="headerlink" title="3、选择排序（Select Sort）"></a>3、选择排序（Select Sort）</h1><h1 id="4、归并排序（Merge-Sort）"><a href="#4、归并排序（Merge-Sort）" class="headerlink" title="4、归并排序（Merge Sort）"></a>4、归并排序（Merge Sort）</h1><h1 id="5、快速排序（Quick-Sort）"><a href="#5、快速排序（Quick-Sort）" class="headerlink" title="5、快速排序（Quick Sort）"></a>5、快速排序（Quick Sort）</h1><p>快速排序是以一个元素为基准，小的元素放左边，大的放右边，然后再用递归分别将左右两边的范围慢慢缩小。基准可以是任意一个元素，但为了防止遇到最坏的情况（比如每次都选最小或最大的元素作为基准），所以一般随机取一个元素。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">sort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> arr[], <span class="hljs-keyword">int</span> left, <span class="hljs-keyword">int</span> right)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> mid = <span class="hljs-built_in">rand</span>()%(right-left+<span class="hljs-number">1</span>)+left;   <span class="hljs-comment">// 取一个随机数</span><br>    <span class="hljs-built_in">swap</span>(arr[left], arr[mid]);  <span class="hljs-comment">// 将随机取出来的元素和最左边的元素交换</span><br>    mid = arr[left];<br>    <span class="hljs-keyword">while</span>(left &lt; right) &#123;<br>        <span class="hljs-keyword">while</span>(left &lt; right &amp;&amp; arr[right] &gt;= mid)<br>            right--;<br>        arr[left] = arr[right]; <span class="hljs-comment">// 先用右边的元素覆盖左边，因为左边第一个元素有记录</span><br>        <span class="hljs-keyword">while</span>(left &lt; right &amp;&amp; arr[left] &lt;= mid)<br>            left++;<br>        arr[right] = arr[left];<br>    &#125;<br>    arr[left] = mid;<br>    <span class="hljs-keyword">return</span> left;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">quickSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> arr[], <span class="hljs-keyword">int</span> left, <span class="hljs-keyword">int</span> right)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span>(left &gt;= right)<br>        <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">int</span> mid = <span class="hljs-built_in">sort</span>(arr, left, right);<br>    <span class="hljs-built_in">quickSort</span>(arr, left, mid<span class="hljs-number">-1</span>);<br>    <span class="hljs-built_in">quickSort</span>(arr, mid+<span class="hljs-number">1</span>, right);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> arr[<span class="hljs-number">10</span>] = &#123;<span class="hljs-number">24</span>,<span class="hljs-number">15</span>,<span class="hljs-number">2</span>,<span class="hljs-number">75</span>,<span class="hljs-number">4</span>,<span class="hljs-number">97</span>,<span class="hljs-number">66</span>,<span class="hljs-number">23</span>,<span class="hljs-number">10</span>,<span class="hljs-number">46</span>&#125;;<br><span class="hljs-built_in">quickSort</span>(arr, <span class="hljs-number">0</span>, <span class="hljs-number">9</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; <span class="hljs-number">10</span>;i++)<br><span class="hljs-built_in">printf</span>((i == <span class="hljs-number">9</span>)?<span class="hljs-string">&quot;%d\n&quot;</span>:<span class="hljs-string">&quot;%d &quot;</span>, arr[i]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="6、堆排序（Heap-Sort）"><a href="#6、堆排序（Heap-Sort）" class="headerlink" title="6、堆排序（Heap Sort）"></a>6、堆排序（Heap Sort）</h1><h1 id="7、桶排序（Bucket-Sort）"><a href="#7、桶排序（Bucket-Sort）" class="headerlink" title="7、桶排序（Bucket Sort）"></a>7、桶排序（Bucket Sort）</h1><h1 id="8、希尔排序（Shell-Sort）"><a href="#8、希尔排序（Shell-Sort）" class="headerlink" title="8、希尔排序（Shell Sort）"></a>8、希尔排序（Shell Sort）</h1>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Re: Blog</title>
    <link href="/2021/09/12/Re-Blog/"/>
    <url>/2021/09/12/Re-Blog/</url>
    
    <content type="html"><![CDATA[<p>今天我又双叒叕建了个博客，这是我大学以来第四个博客，用的是 GitHub Pages + Hexo。</p><p>我从大一寒假就开始折腾博客了，那个时候参加学校的 ACM 社团，正好喜欢这玩意儿，也学的挺好，就想着模仿学长用 GitHub 建个博客，在上面写自己的做题心得。然而也许是因为技术力不够，也没什么耐心，我看着教程一步步弄也没弄好。后来在研究如何建博客的时候，我对此产生了怀疑：我为什么要建博客呢？对啊，为什么要建？为了给自己看？可我都会了，为什么还要看呢？为了给别人看？那为什么不直接在 CSDN 写，自建博客有多大概率会被人搜到呢？emmm……在一阵子自我怀疑后，我放弃了，因为我觉得博客没用。</p><p>后来到了大一快结束时，也就是 2018 年 6 月，我又想建博客了。不过这次我没有继续研究 Github，而是选择了简单的 WordPress，可以直接建站的那个。在短暂的设置后，我的博客（<a href="https://zfygenius.wordpress.com/">https://zfygenius.wordpress.com/</a>）建成了。因为那个时候我已经退出了 ACM 社团，不再做题了，所以一时不知道该往博客里写些什么，后来把自己的一次编程作业的代码贴了上去，又写了一篇软件推荐，然后就不了了之了。</p><p><img src="https://z3.ax1x.com/2021/09/12/49anNq.png" alt="第一个博客——WordPress"></p><p>2018 年底，我当时在做一个网页制作的期末项目，UI 模仿了<a href="https://moe.best/">神代綺凛</a>的博客，由于每天都要找出它来参考一下，所以那段时间我又萌发了建博客的想法。于是在做完网页项目后，我再次研究了一下如何用 GitHub 建博客，最终建成功了（<a href="https://gfkgfkgfk.github.io/">https://gfkgfkgfk.github.io/</a>）。不过这个博客也没写什么东西，第一篇博文简单叙述了一下建站过程，第二篇详细说了一下网页的制作过程，然后就没后续了。那个网页的制作过程我当时写的挺用心的，所以现在将它搬到了这个博客底下，就当作留念了。不过我在搬这篇文章时发现存在 GitHub 里的图片全都不显示了，难道现在没法当作图床了？也正是因为这篇文章的图片没了，所以我这次不敢再将 GitHub 当作图床，而是选择了 <a href="https://sm.ms/">SM.MS</a> 和<a href="https://imgtu.com/">路过图床</a>混用。</p><p><img src="https://z3.ax1x.com/2021/09/12/49au40.png" alt="第二个博客——Github Pages"></p><p>大二寒假，我从网上得知了 Blogger 这个免费且有较高自由度的博客网站，在浏览了它的一些主题后，我觉得值得一试，于是第三个博客就建好了（<a href="https://fy-zhang.blogspot.com/">https://fy-zhang.blogspot.com/</a>）。这个博客我当时真的挺喜欢的，所以还把之前写过的两篇文章迁移了过来。同时，我发现近一年没做 ACM 题的我对链表有些生疏了，便从学校 OJ 上找到了自己当时编的程序，放到了”OJ 精选“页面里。有意思的是，这个”主页“和”OJ 精选“（<a href="https://fy-zhang-oj.blogspot.com/">https://fy-zhang-oj.blogspot.com/</a>）其实是两个网站，Blogger 有个功能可以在那一行添加网站，我就正好利用这一点比它们伪装成了两个页面 23333。</p><p><img src="https://z3.ax1x.com/2021/09/12/49amEn.png" alt="第三个博客——Blogger"></p><p>大二结束后，我就再也没用过博客，对它彻底失去了兴趣。而我今天再次将它捡起来的原因，是因为我见到棺材落了泪，发现博客的真正用途了。</p><p>我现在大四毕业，之前因为申请上了利兹大学的研究生，所以完全没打算找工作，但快毕业时我又不想去了，目前是学业工作两手空，就很慌。我现在在准备秋招的笔试和面试，这几天做 LeetCode 和看面经时我发现，想要在大城市或大公司找到工作还是挺难的。笔试考的是数据结构和算法，这玩意儿我大一倒是会，但现在早忘了。看课本吧，内容太简单，我当时在 ACM 社团学到的东西也没往上面记；看算法书吧，上面的格式和我学的有些出入，短时间接受起来并不算容易；找找以前写过的程序吧，七零八落得谁知道对应程序在哪里！嗯，我后悔当初没有写博客了，就算我只将当时写的程序记上去，也比看不熟悉的代码风格要容易。比如这个大一寒假写的<a href="https://paste.ubuntu.com/26503353/">归并排序</a>，真的是一看就明白了。😂</p><p>这个博客目前的作用是整理一下近期学习的知识点，到时候面试前可以快速翻出来看，以后大概也会坚持下去吧，毕竟已经吃到了一次苦头。现在我开始刷 LeetCode 了，不管是否找到工作，我都打算一直刷下去，遇到有意思的题目我也会写道博客上来的！</p>]]></content>
    
    
    <categories>
      
      <category>日常</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>【作业】电子商务架构 Final Project</title>
    <link href="/2018/12/27/%E3%80%90%E4%BD%9C%E4%B8%9A%E3%80%91%E7%94%B5%E5%AD%90%E5%95%86%E5%8A%A1%E6%9E%B6%E6%9E%84-Final-Project/"/>
    <url>/2018/12/27/%E3%80%90%E4%BD%9C%E4%B8%9A%E3%80%91%E7%94%B5%E5%AD%90%E5%95%86%E5%8A%A1%E6%9E%B6%E6%9E%84-Final-Project/</url>
    
    <content type="html"><![CDATA[<p class="note note-success">文章搬运自 <a href="https://gfkgfkgfk.github.io/2018/12/27/Final-Project-%E5%88%B6%E4%BD%9C%E8%BF%87%E7%A8%8B/">Final Project 制作过程 - 张峰源的博客 | ZFY Blog</a></p><p>这是我编写的第一个“大型程序”，集中敲了三天半代码，后来又断断续续增加了一些页面。</p><p>本次制作主要参考了<a href="https://moe.best/">神代綺凜の萌化小基地</a>、<a href="http://www.runoob.com/">菜鸟教程</a>、<a href="http://www.w3school.com.cn/index.html">W3school</a>，以及其他的一些博客。</p><p>美术不好的我制作网页最头疼的地方就是 CSS，由于是期末作业，所以模板什么的不能找，那就借鉴一下别人的吧！于是找到了神代绮凛的 Blog，照着它的样式、颜色做了一个网页出来。虽然由于技术原因，未能将他的 Blog 完美重现，但依然解决了我最为头疼的问题。</p><p><img src="https://z3.ax1x.com/2021/09/12/492os1.jpg" alt="好看就行了，管它像不像呢 (￣▽￣)"></p><p>在 “Contact” 页面中，老师让我们附上地图，这个地图肯定不是普通的截图，所以我就去网上搜了一下如何插入地图，这里参考了<a href="https://blog.csdn.net/wyl1401672169/article/details/79021112">js调用百度地图接口实现定位功能</a>，用到了<a href="http://lbsyun.baidu.com/index.php?title=jspopular">百度地图JS API</a>。代码复制上去之后改改就可以用了，所以我也没有去深究它的含义23333。</p><p><img src="https://z3.ax1x.com/2021/09/12/492Tqx.gif" alt="百度地图JS API"></p><p>做完这些基础的 HTML 页面后，我开始制作真正需要 PHP 的页面，就是上方那一条的右边四个按钮。</p><p>我首先做的是 “Animation” 页面，因为我要在这个页面中显示出动漫的详细信息，所以需要用到数据库。这里我为了在表中存入中文，参考了<a href="https://www.jb51.net/article/147131.htm">mysql中插入表数据中文乱码问题的解决方法</a>，为了更方便地往数据库中存入数据，参考了<a href="https://blog.csdn.net/qq_36832411/article/details/76619663">如何使用mysql导入txt数据</a>。</p><p><img src="https://z3.ax1x.com/2021/09/12/492hRJ.gif" alt="动画信息数据库"></p><p>建立完数据库后，我利用 PHP 连接数据库，读取里面的动漫名(Name)和图片地址(Cover)，然后将它们平铺在网页上。有两季及以上的动画自动在名字后面加上第几季，只有一季的只显示动画名，这里我用非常简单粗暴的 for 循环判断是否只有一季，肯定有更好的办法，但我暂时还想不到。于是，”Animation” 页面就做成了这个样子：</p><p><img src="https://z3.ax1x.com/2021/09/12/4924z9.jpg" alt="Animation 页面"></p><p>接下来是登录、注册和登出，我参考了<a href="https://www.cnblogs.com/leinov/p/3745401.html">php注册登录系统</a>和<a href="https://zhidao.baidu.com/question/1882548854151467788.html">php判断用户是否登录</a>，稍微改了改里面的代码，然后作为自己的，很轻松就弄出来了。登出的话我将它设定为点击名字后跳转到一个页面，然后那里有清除 SESSION 的代码。登录时的条款条件和隐私政策我照搬了<a href="https://www.pythonanywhere.com/">Python Anywhere</a>的条款(￣ε(#￣)☆╰╮o(￣皿￣///)</p><p><img src="https://z3.ax1x.com/2021/09/12/492HZ6.jpg" alt="注册和登录"></p><p>最后是 “My Favorite”，这个页面的作用是显示用户喜欢的动画，本来想的是将 “User” 和 “Information” 这两个数据库连接一下，结果（因技术不够出现的结果又出现了！）连接不成功，只能将喜欢的动画信息再在 “User” 里存一遍了。问题很多，但好歹是实现了~</p><p>做完基础页面，我开始做每个动画的详细信息页面，以 “Cover” 作连接，用 PHP 实现了精准跳转(～￣▽￣)～</p><p><img src="https://z3.ax1x.com/2021/09/12/492fG4.jpg" alt="Information - 《中二病也要谈恋爱》"></p><p>最后来张代码合影👇</p><p><img src="https://z3.ax1x.com/2021/09/12/492IMR.gif" alt="Code"></p><p>点击这里查看代码👉<a href="https://github.com/FY-Zhang/2018-12-Final-Project">2018-12-Final-Project</a></p>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
